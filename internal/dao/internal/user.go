// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserDao is the data access object for table tb_user.
type UserDao struct {
	table   string      // table is the underlying table name of the DAO.
	group   string      // group is the database configuration group name of current DAO.
	columns UserColumns // columns contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table tb_user.
type UserColumns struct {
	Id          string // 用户ID
	UserName    string // 姓名
	Age         string // 年龄
	Sex         string // 性别（1男 2女 0未知）
	PhoneNumber string // 手机号码
	CompanyId   string // 单位id
	CompanyName string // 单位
	Status      string // 帐号状态（0正常 1停用）
	OpenId      string // 来源账号id
	Avatar      string // 图像路径
	SysUserId   string // 中台用户ID
	SysPersonId string // 中台人员ID
	AdminFlag   string // 管理员标志，0否，1是
	DelFlag     string // 删除标志（0代表存在 1代表删除）
	CreateBy    string // 创建者
	CreateTime  string // 创建时间
	UpdateBy    string // 更新者
	UpdateTime  string // 更新时间
}

//  userColumns holds the columns for table tb_user.
var userColumns = UserColumns{
	Id:          "id",
	UserName:    "user_name",
	Age:         "age",
	Sex:         "sex",
	PhoneNumber: "phone_number",
	CompanyId:   "company_id",
	CompanyName: "company_name",
	Status:      "status",
	OpenId:      "open_id",
	Avatar:      "avatar",
	SysUserId:   "sys_user_id",
	SysPersonId: "sys_person_id",
	AdminFlag:   "admin_flag",
	DelFlag:     "del_flag",
	CreateBy:    "create_by",
	CreateTime:  "create_time",
	UpdateBy:    "update_by",
	UpdateTime:  "update_time",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		group:   "default",
		table:   "tb_user",
		columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserDao) Columns() UserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
